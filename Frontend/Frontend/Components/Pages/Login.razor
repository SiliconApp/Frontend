@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>SignIn</PageTitle>
<div class="signIn">
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="signin">
        <DataAnnotationsValidator />
        <div class="Welcomebacktext">
            <h1>
                <strong>
                    Welcome Back
                </strong>
            </h1>

            <p>
                Don’t have an account yet?

                <a href="SignUp"> Sign up here.</a>
            </p>


        </div>

        <div class="Email input-validation-error">

            <p><strong>Email</strong></p>
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />


        </div>

        <div class="password input-validation-error">

            <p>
                <strong>
                    Password
                </strong>
            </p>

            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />


        </div>

        <div class="checkbox">

            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            <label asp-for=RememberMe>Remember me </label>

        </div>

        <div class="signinbutton">
            <button type="Submit">
                Sign in
            </button>
        </div>

        <div class="forgotpassword">
            <a href="#">
                Forgot your password?
            </a>
        </div>
    </EditForm>

</div>
@code {

    private string? ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            ErrorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
