@page "/Account"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Frontend.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Profile</PageTitle>

    <div class="accountDetailsMain">

        <form method="Post" asp-action="Index" asp-controller="AccountDetails" novalidate>


            <div class="accountDetailsHeader">
                <h2><strong>Account Details</strong></h2>

                <p><strong>Basic Info</strong></p>
            </div>

            <div class="firstNameLastname">
                <div class="firstName input-validation-error">
                    <p><strong>FirstName</strong></p>
                    <input asp-for=BasicInfoForm.FirstName  placeholder="Firstname">
                </div>

                <div class="lastName input-validation-error">
                    <p><strong>LastName</strong></p>
                    <input asp-for=BasicInfoForm.LastName placeholder="Lastname">
                </div>
            </div>

            <div class="emailAddressPhoneNumber">
                <div class="emailAddress input-validation-error">
                    <p><strong>Email Address</strong></p>
                    <input asp-for=BasicInfoForm.Email placeholder="Email">
                </div>

                <div class="phoneNumber">
                    <p><strong>Phone Number</strong></p>
                    <input asp-for=BasicInfoForm.PhoneNumber placeholder="PhoneNumber">
                </div>

            </div>

            <div class="accountDetailsBio">
                <p><strong>Bio</strong></p>
                <input placeholder="Add a short bio...">
            </div>

            <div class="accountDetailsButtons">
                <nav class="cancel">
                    <button type="Reset">Cancel</button>
                </nav>

                <nav class="saveChanges">
                    <button type="Submit">Save Changes</button>
                </nav>

            </div>

        </form>


        <form method="post" asp-action="Index" asp-controller="AccountDetails" novalidate>
            <div class="adressHeader">
                <hr>
                <p><strong>Address</strong></p>
            </div>

            <div class="adressLine1 input-validation-error">
                <p><strong>Address line 1</strong></p>
                <input asp-for=AddressInfoForm.AddressLine_1 placeholder="Enter your address line">
            </div>

            <div class="addressLine2">
                <p><strong>Address line 2</strong></p>
                <input asp-for=AddressInfoForm.AddressLine_2 placeholder="Enter your 2 address line">
            </div>


            <div class="postalCodeCity input-validation-error">
                <div class="postalCode">
                    <p><strong>Postal Code</strong></p>
                    <input asp-for=AddressInfoForm.PostalCode placeholder="Enter your postal code">
                </div>

                <div class="city input-validation-error">
                    <p><strong>City</strong></p>
                    <input asp-for=AddressInfoForm.City placeholder="Enter your city">
                </div>



            </div>


            <div class="postalCodeCityButtons">
                <nav class="cancel2">
                    <button type="Reset">Cancel</button>
                </nav>

                <nav class="saveChanges2">
                    <button type="Submit"> Save Changes</button>
                </nav>

            </div>

        </form>

</div>





@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
